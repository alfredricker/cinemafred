generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                String    @id @default(uuid())
  email             String    @unique
  username          String    @unique
  password_hash     String
  isActive         Boolean   @default(true)
  isAdmin          Boolean   @default(false)
  mustResetPassword Boolean  @default(false)
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
  reviews           Review[]
  ratings          Rating[]
}

model Movie {
  id                String    @id @default(uuid())
  title             String
  year              Int
  duration          Int?      // Duration in seconds
  director          String
  genre             String[]  // Prisma supports array types
  rating            Float     @default(0)
  averageRating     Float?    @default(0.0)  // Store precomputed rating
  r2_image_path     String
  r2_video_path     String
  r2_subtitles_path String?   // Optional
  r2_hls_path       String?   // HLS master playlist path (e.g., "hls/movie-id/playlist.m3u8")
  hls_ready         Boolean   @default(false) // Whether HLS segments are ready for streaming
  description       String
  streaming_url     String?   // Optional
  cloudflare_video_id String? // Optional
  created_at        DateTime  @default(now())
  updated_at        DateTime  @updatedAt
  reviews           Review[]
  ratings           Rating[]

  @@index([title])
  @@index([hls_ready])
}

model Review {
  id          String    @id @default(uuid())
  user        User      @relation(fields: [user_id], references: [id])
  user_id     String
  movie       Movie     @relation(fields: [movie_id], references: [id])
  movie_id    String
  rating      Int
  review_text String?
  created_at  DateTime  @default(now())
  updated_at  DateTime  @updatedAt

  @@unique([user_id, movie_id])
  @@index([user_id])
  @@index([movie_id])
}

model Rating {
  id          String    @id @default(uuid())
  user        User      @relation(fields: [user_id], references: [id])
  user_id     String
  movie       Movie     @relation(fields: [movie_id], references: [id])
  movie_id    String
  value       Float
  created_at  DateTime  @default(now())
  updated_at  DateTime  @updatedAt

  @@unique([user_id, movie_id])
  @@index([movie_id])
  @@index([user_id])
}